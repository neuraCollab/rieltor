/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    properties: Property;
    agents: Agent;
    testimonials: Testimonial;
    flats: Flat;
    'residential-complexes': ResidentialComplex;
    commercial: Commercial;
    lands: Land;
    reviews: Review;
    messages: Message;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    properties: PropertiesSelect<false> | PropertiesSelect<true>;
    agents: AgentsSelect<false> | AgentsSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    flats: FlatsSelect<false> | FlatsSelect<true>;
    'residential-complexes': ResidentialComplexesSelect<false> | ResidentialComplexesSelect<true>;
    commercial: CommercialSelect<false> | CommercialSelect<true>;
    lands: LandsSelect<false> | LandsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    messages: MessagesSelect<false> | MessagesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | NavbarBlock
    | {
        /**
         * Опциональный текст для бейджа (например, "Real Estate")
         */
        badgeText?: string | null;
        headline: string;
        highlight?: string | null;
        subheadline?: string | null;
        image: number | Media;
        id?: string | null;
        blockName?: string | null;
        blockType: 'hero';
      }
    | {
        title: string;
        subtitle?: string | null;
        buttonText?: string | null;
        buttonLink?: string | null;
        items?:
          | {
              icon: string;
              title: string;
              description: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'vision';
      }
    | {
        blockType: 'properties';
        title: string;
        /**
         * Например: /properties
         */
        showAllLink?: string | null;
        /**
         * Выберите объекты недвижимости для отображения в блоке
         */
        properties?: (number | Property)[] | null;
        layout?: ('grid' | 'list') | null;
        /**
         * Минимум 3, максимум 12 объектов
         */
        itemsPerPage: number;
        enableFilters?: boolean | null;
        filters?: {
          priceRange?: boolean | null;
          propertyType?: boolean | null;
          bedrooms?: boolean | null;
          bathrooms?: boolean | null;
          area?: boolean | null;
        };
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'feature';
        label: string;
        title: string;
        features: {
          icon:
            | 'user-check'
            | 'settings'
            | 'trending-up'
            | 'refresh-cw'
            | 'users'
            | 'shield-check'
            | 'home'
            | 'key'
            | 'map-pin'
            | 'phone'
            | 'mail'
            | 'calendar'
            | 'heart'
            | 'star'
            | 'check-circle'
            | 'award';
          title: string;
          description: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'how-it-works';
        label: string;
        title: string;
        steps: {
          /**
           * Введите номер иконки от 1 до 6
           */
          icon: string;
          title: string;
          description: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'blog';
        title: string;
        subtitle?: string | null;
        /**
         * Выберите посты для отображения в блоке
         */
        posts?: (number | Post)[] | null;
        /**
         * Например: /posts
         */
        showAllLink?: string | null;
        /**
         * Минимум 3, максимум 12 постов
         */
        itemsPerPage: number;
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'about-hero';
        label: string;
        title: string;
        images: {
          image: number | Media;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'vision-mission';
        title: string;
        description: string;
        buttonText?: string | null;
        buttonLink?: string | null;
        stats: {
          value: string;
          label: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'amenities';
        label: string;
        title: string;
        image: number | Media;
        amenities: {
          icon: 'wifi' | 'shield' | 'gym' | 'clean';
          title: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'agents';
        label: string;
        title: string;
        agents: (number | Agent)[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'testimonials';
        label: string;
        title: string;
        testimonials: (number | Testimonial)[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'call-to-action-new';
        label: string;
        title: string;
        buttonText: string;
        buttonLink: string;
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'contact-hero';
        label: string;
        title: string;
        image: number | Media;
        email: string;
        phone: string;
        location: string;
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'contact-us-form';
        label: string;
        title: string;
        form: number | Form;
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'faq';
        label: string;
        title: string;
        items: {
          question: string;
          answer: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
      }
    | {
        blockType: 'property-features';
        property: number | Property;
        id?: string | null;
        blockName?: string | null;
      }
    | {
        filters: {
          label: string;
          collection: string;
          fields: {
            name: string;
            label?: string | null;
            type: 'text' | 'number' | 'checkbox' | 'select' | 'multi-select' | 'range';
            options?:
              | {
                  value: string;
                  label?: string | null;
                  id?: string | null;
                }[]
              | null;
            min?: number | null;
            max?: number | null;
            step?: number | null;
            id?: string | null;
          }[];
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
        blockType: 'house-filter';
      }
    | {
        blockType: 'map';
        title?: string | null;
        center?: {
          lat?: number | null;
          lng?: number | null;
          zoom?: number | null;
        };
        /**
         * Если пусто — можно будет загрузить последние объекты автоматически на фронте
         */
        properties?: (number | Property)[] | null;
        autoLoad?: boolean | null;
        limit?: number | null;
        id?: string | null;
        blockName?: string | null;
      }
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  image: number | Media;
  publishedDate: string;
  excerpt: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  categories?: (number | Category)[] | null;
  author: number | User;
  status: 'draft' | 'published';
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  slug?: string | null;
  role: 'admin' | 'realtor';
  phone?: string | null;
  agency?: string | null;
  photo?: (number | null) | Media;
  bio?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NavbarBlock".
 */
export interface NavbarBlock {
  logoText: string;
  links: {
    text: string;
    url: string;
    id?: string | null;
  }[];
  button: {
    text: string;
    url: string;
  };
  avatar: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'navbar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "properties".
 */
export interface Property {
  id: number;
  title: string;
  slug: string;
  address: string;
  /**
   * Можно указать вручную или они будут рассчитаны по адресу
   */
  coordinates?: {
    lat?: number | null;
    lng?: number | null;
    address?: string | null;
  };
  price: number;
  type: 'sale' | 'rent';
  bedrooms: number;
  bathrooms: number;
  area: number;
  images: {
    image: number | Media;
    id?: string | null;
  }[];
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  status?: ('active' | 'sold' | 'draft') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agents".
 */
export interface Agent {
  id: number;
  name: string;
  position: string;
  image: number | Media;
  email: string;
  phone: string;
  description?: string | null;
  socialLinks?:
    | {
        platform?: ('linkedin' | 'twitter' | 'facebook' | 'instagram') | null;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: number;
  name: string;
  location: string;
  image: number | Media;
  text: string;
  rating: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flats".
 */
export interface Flat {
  id: number;
  title: string;
  slug: string;
  realtor?: (number | null) | User;
  propertyCategory: 'apartment' | 'apartments' | 'studio' | 'townhouse' | 'penthouse' | 'house-part';
  transactionType: 'sale' | 'rent' | 'daily';
  location: {
    city: string;
    district: string;
    address: string;
    metro?: string | null;
    metroTime?: number | null;
  };
  /**
   * Заполняются автоматически
   */
  coordinates?: {
    lat?: number | null;
    lng?: number | null;
    formattedAddress?: string | null;
  };
  rooms: 'studio' | '1' | '2' | '3' | '4' | '5plus';
  area: {
    total: number;
    living?: number | null;
    kitchen?: number | null;
  };
  floorInfo?: {
    floor?: number | null;
    totalFloors?: number | null;
  };
  price: number;
  currency?: ('RUB' | 'USD' | 'EUR') | null;
  buildingType?: ('panel' | 'brick' | 'monolithic' | 'block' | 'wood') | null;
  yearBuilt?: number | null;
  ceilingHeight?: number | null;
  images?:
    | {
        image: number | Media;
        alt?: string | null;
        id?: string | null;
      }[]
    | null;
  layout?: (number | null) | Media;
  video?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  amenities?:
    | {
        amenity: string;
        id?: string | null;
      }[]
    | null;
  residentialComplex?: (number | null) | ResidentialComplex;
  status?: ('active' | 'sold' | 'unpublished' | 'draft') | null;
  isFeatured?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "residential-complexes".
 */
export interface ResidentialComplex {
  id: number;
  name: string;
  slug: string;
  status: 'planning' | 'under-construction' | 'completed';
  type: 'economy' | 'comfort' | 'business' | 'premium';
  developer?: string | null;
  location: {
    city: string;
    district: string;
    address: string;
  };
  completionDate?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  images?:
    | {
        image: number | Media;
        id?: string | null;
      }[]
    | null;
  infrastructure?:
    | {
        item?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commercial".
 */
export interface Commercial {
  id: number;
  title: string;
  slug: string;
  commercialType:
    | 'office'
    | 'retail'
    | 'mall'
    | 'warehouse'
    | 'manufacturing'
    | 'free-purpose'
    | 'hotel'
    | 'restaurant'
    | 'business-center';
  transactionType: 'sale' | 'rent';
  location: {
    city: string;
    district: string;
    address: string;
    highway?: string | null;
  };
  coordinates?: {
    lat?: number | null;
    lng?: number | null;
    formattedAddress?: string | null;
  };
  area: {
    total: number;
    usable?: number | null;
    land?: number | null;
  };
  price: number;
  priceType?: ('total' | 'per_sqm_month' | 'per_sqm_year') | null;
  currency?: ('RUB' | 'USD' | 'EUR') | null;
  floor?: number | null;
  ceilingHeight?: number | null;
  entranceType?: ('separate' | 'through-bc' | 'from-street') | null;
  condition?: ('finished' | 'rough' | 'needs_renovation' | 'for-finishing') | null;
  utilities?:
    | {
        utility?: string | null;
        id?: string | null;
      }[]
    | null;
  images?:
    | {
        image: number | Media;
        id?: string | null;
      }[]
    | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  contactInfo?: {
    contactPerson?: string | null;
    phone?: string | null;
    email?: string | null;
  };
  status?: ('active' | 'sold' | 'unpublished' | 'draft') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lands".
 */
export interface Land {
  id: number;
  title: string;
  slug: string;
  purpose?: ('ijs' | 'snt' | 'lph' | 'commercial' | 'agricultural') | null;
  area: number;
  price: number;
  location: {
    city: string;
    district: string;
    address?: string | null;
  };
  communications?:
    | {
        communication?: string | null;
        id?: string | null;
      }[]
    | null;
  images?:
    | {
        image?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  status?: ('active' | 'sold' | 'unpublished') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: number;
  realtor: number | User;
  authorName: string;
  authorEmail?: string | null;
  rating: number;
  comment: string;
  status?: ('pending' | 'approved' | 'rejected') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages".
 */
export interface Message {
  id: number;
  message: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  attachment?: (number | null) | Media;
  realtor: number | User;
  subject: string;
  name: string;
  email: string;
  phone?: string | null;
  property?: string | null;
  status?: ('new' | 'in-progress' | 'completed') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'properties';
        value: number | Property;
      } | null)
    | ({
        relationTo: 'agents';
        value: number | Agent;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: number | Testimonial;
      } | null)
    | ({
        relationTo: 'flats';
        value: number | Flat;
      } | null)
    | ({
        relationTo: 'residential-complexes';
        value: number | ResidentialComplex;
      } | null)
    | ({
        relationTo: 'commercial';
        value: number | Commercial;
      } | null)
    | ({
        relationTo: 'lands';
        value: number | Land;
      } | null)
    | ({
        relationTo: 'reviews';
        value: number | Review;
      } | null)
    | ({
        relationTo: 'messages';
        value: number | Message;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        navbar?: T | NavbarBlockSelect<T>;
        hero?:
          | T
          | {
              badgeText?: T;
              headline?: T;
              highlight?: T;
              subheadline?: T;
              image?: T;
              id?: T;
              blockName?: T;
            };
        vision?:
          | T
          | {
              title?: T;
              subtitle?: T;
              buttonText?: T;
              buttonLink?: T;
              items?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        properties?:
          | T
          | {
              blockType?: T;
              title?: T;
              showAllLink?: T;
              properties?: T;
              layout?: T;
              itemsPerPage?: T;
              enableFilters?: T;
              filters?:
                | T
                | {
                    priceRange?: T;
                    propertyType?: T;
                    bedrooms?: T;
                    bathrooms?: T;
                    area?: T;
                  };
              id?: T;
              blockName?: T;
            };
        feature?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              features?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'how-it-works'?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              steps?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        blog?:
          | T
          | {
              blockType?: T;
              title?: T;
              subtitle?: T;
              posts?: T;
              showAllLink?: T;
              itemsPerPage?: T;
              id?: T;
              blockName?: T;
            };
        'about-hero'?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              images?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'vision-mission'?:
          | T
          | {
              blockType?: T;
              title?: T;
              description?: T;
              buttonText?: T;
              buttonLink?: T;
              stats?:
                | T
                | {
                    value?: T;
                    label?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        amenities?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              image?: T;
              amenities?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        agents?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              agents?: T;
              id?: T;
              blockName?: T;
            };
        testimonials?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              testimonials?: T;
              id?: T;
              blockName?: T;
            };
        'call-to-action-new'?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              buttonText?: T;
              buttonLink?: T;
              id?: T;
              blockName?: T;
            };
        'contact-hero'?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              image?: T;
              email?: T;
              phone?: T;
              location?: T;
              id?: T;
              blockName?: T;
            };
        'contact-us-form'?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              form?: T;
              id?: T;
              blockName?: T;
            };
        faq?:
          | T
          | {
              blockType?: T;
              label?: T;
              title?: T;
              items?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'property-features'?:
          | T
          | {
              blockType?: T;
              property?: T;
              id?: T;
              blockName?: T;
            };
        'house-filter'?:
          | T
          | {
              filters?:
                | T
                | {
                    label?: T;
                    collection?: T;
                    fields?:
                      | T
                      | {
                          name?: T;
                          label?: T;
                          type?: T;
                          options?:
                            | T
                            | {
                                value?: T;
                                label?: T;
                                id?: T;
                              };
                          min?: T;
                          max?: T;
                          step?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        map?:
          | T
          | {
              blockType?: T;
              title?: T;
              center?:
                | T
                | {
                    lat?: T;
                    lng?: T;
                    zoom?: T;
                  };
              properties?: T;
              autoLoad?: T;
              limit?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NavbarBlock_select".
 */
export interface NavbarBlockSelect<T extends boolean = true> {
  logoText?: T;
  links?:
    | T
    | {
        text?: T;
        url?: T;
        id?: T;
      };
  button?:
    | T
    | {
        text?: T;
        url?: T;
      };
  avatar?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  image?: T;
  publishedDate?: T;
  excerpt?: T;
  content?: T;
  categories?: T;
  author?: T;
  status?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  role?: T;
  phone?: T;
  agency?: T;
  photo?: T;
  bio?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "properties_select".
 */
export interface PropertiesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  address?: T;
  coordinates?:
    | T
    | {
        lat?: T;
        lng?: T;
        address?: T;
      };
  price?: T;
  type?: T;
  bedrooms?: T;
  bathrooms?: T;
  area?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agents_select".
 */
export interface AgentsSelect<T extends boolean = true> {
  name?: T;
  position?: T;
  image?: T;
  email?: T;
  phone?: T;
  description?: T;
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  name?: T;
  location?: T;
  image?: T;
  text?: T;
  rating?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flats_select".
 */
export interface FlatsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  realtor?: T;
  propertyCategory?: T;
  transactionType?: T;
  location?:
    | T
    | {
        city?: T;
        district?: T;
        address?: T;
        metro?: T;
        metroTime?: T;
      };
  coordinates?:
    | T
    | {
        lat?: T;
        lng?: T;
        formattedAddress?: T;
      };
  rooms?: T;
  area?:
    | T
    | {
        total?: T;
        living?: T;
        kitchen?: T;
      };
  floorInfo?:
    | T
    | {
        floor?: T;
        totalFloors?: T;
      };
  price?: T;
  currency?: T;
  buildingType?: T;
  yearBuilt?: T;
  ceilingHeight?: T;
  images?:
    | T
    | {
        image?: T;
        alt?: T;
        id?: T;
      };
  layout?: T;
  video?: T;
  description?: T;
  amenities?:
    | T
    | {
        amenity?: T;
        id?: T;
      };
  residentialComplex?: T;
  status?: T;
  isFeatured?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "residential-complexes_select".
 */
export interface ResidentialComplexesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  status?: T;
  type?: T;
  developer?: T;
  location?:
    | T
    | {
        city?: T;
        district?: T;
        address?: T;
      };
  completionDate?: T;
  description?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  infrastructure?:
    | T
    | {
        item?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commercial_select".
 */
export interface CommercialSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  commercialType?: T;
  transactionType?: T;
  location?:
    | T
    | {
        city?: T;
        district?: T;
        address?: T;
        highway?: T;
      };
  coordinates?:
    | T
    | {
        lat?: T;
        lng?: T;
        formattedAddress?: T;
      };
  area?:
    | T
    | {
        total?: T;
        usable?: T;
        land?: T;
      };
  price?: T;
  priceType?: T;
  currency?: T;
  floor?: T;
  ceilingHeight?: T;
  entranceType?: T;
  condition?: T;
  utilities?:
    | T
    | {
        utility?: T;
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  contactInfo?:
    | T
    | {
        contactPerson?: T;
        phone?: T;
        email?: T;
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lands_select".
 */
export interface LandsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  purpose?: T;
  area?: T;
  price?: T;
  location?:
    | T
    | {
        city?: T;
        district?: T;
        address?: T;
      };
  communications?:
    | T
    | {
        communication?: T;
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  realtor?: T;
  authorName?: T;
  authorEmail?: T;
  rating?: T;
  comment?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages_select".
 */
export interface MessagesSelect<T extends boolean = true> {
  message?: T;
  attachment?: T;
  realtor?: T;
  subject?: T;
  name?: T;
  email?: T;
  phone?: T;
  property?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}